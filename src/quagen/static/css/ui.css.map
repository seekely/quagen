{
  "version": 3,
  "file": "ui.css",
  "sources": [
    "..\\..\\ui\\menu\\App.svelte",
    "..\\..\\ui\\game\\Scores.svelte",
    "..\\..\\ui\\game\\Board.svelte",
    "..\\..\\ui\\game\\Settings.svelte",
    "..\\..\\ui\\game\\Score.svelte",
    "..\\..\\ui\\game\\Spot.svelte",
    "..\\..\\ui\\game\\StartPrompt.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createGame } from \"../menu.js\";\n\n  const difficulties = [[\"Easy\", 0], [\"Medium\", 1], [\"Hard\", 2]];\n  let playerCount = 2;\n  let aiCount = 0;\n  let aiStrength = 0;\n\n  function playAi() {\n    aiCount = 1;\n    createGame(playerCount, aiCount, aiStrength);\n  }\n\n  function playFriend() {\n    createGame(playerCount, aiCount, aiStrength);\n  }\n\n  function changeDifficulty(event) {\n    aiStrength = event.target.getAttribute(\"difficulty\");\n  }\n</script>\n\n<style>\n  .container {\n    display: inline-flex;\n    flex-wrap: wrap;\n  }\n\n  .block {\n    margin-right: 1em;\n  }\n\n  .option-ai {\n    margin-top: 5%;\n  }\n\n  .option-friend {\n    margin-top: 8%;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  .button-play {\n    border-radius: 4px;\n    color: white;\n    font-size: 300%;\n    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n  }\n\n  .button-ai {\n    background: rgb(223, 117, 20);\n  }\n\n  .button-friend {\n    background: rgb(28, 184, 65);\n  }\n\n  div.difficulty {\n    margin-top: 0.5em;\n  }\n\n  .button-difficulty {\n    color: white;\n    margin-right: 0.5em;\n    font-size: 125%;\n    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n    background: rgb(223, 117, 20);\n  }\n\n  .button-difficulty-selected {\n    outline: 3px dashed black;\n    outline-offset: 3px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"block\">\n    <img src=\"/img/intro.gif\" alt=\"Demo gif\" />\n  </div>\n\n  <div class=\"block\">\n    <div class=\"option-ai\">\n      <div>\n        <button class=\"button-play button-ai\" on:mouseup={playAi}>\n          Play AI\n        </button>\n      </div>\n      <div class=\"difficulty\">\n        {#each difficulties as difficulty}\n          <button\n            class=\"button-difficulty\"\n            class:button-difficulty-selected={aiStrength == difficulty[1]}\n            difficulty={difficulty[1]}\n            on:mouseup={changeDifficulty}>\n            {difficulty[0]}\n          </button>\n        {/each}\n      </div>\n\n    </div>\n    <div class=\"option-friend\">\n      <button class=\"button-play button-friend\" on:mouseup={playFriend}>\n        Play Friend\n      </button>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  import Score from \"./Score.svelte\";\n\n  export let scores = [];\n</script>\n\n<style>\n  div.container {\n    white-space: nowrap;\n  }\n</style>\n\n<div>\n  <div class=\"container\">\n    <Score key={true} />\n    {#each scores as score, i}\n      <Score player={i} {...score} />\n    {/each}\n  </div>\n</div>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  import Spot from \"./Spot.svelte\";\n  import { isTouching } from \"../utils.js\";\n\n  // The turn number completed this board state reflects\n  export let turnCompleted = 0;\n\n  // number of spots on the board\n  export let width = 0;\n  export let height = 0;\n\n  // data for each spot on the board in the format of\n  // [[{\"x\": 0, \"y\": 0}, {\"x\": 0, \"y\": 1}], [{\"x\": 1, \"y\": 0}, {\"x\": 1, \"y\": 1}]]\n  export let spots = [];\n\n  // If the game/board state allows the player to make a move\n  export let allowMove = true;\n\n  // All the past moves made in the game in the format of\n  // [[(color0, x, y), (color1, x, y)]]\n  export let moveHistory = [];\n\n  // This player's selected spot on the board, or -1 if none\n  $: selectedX = turnCompleted ? -1 : -1;\n  $: selectedY = turnCompleted ? -1 : -1;\n\n  // if we sent off a move from this player to the server\n  $: pendingMove = turnCompleted ? false : false;\n\n  // the last set of moves made by each player in the format of\n  // [(color0, x, y), (color1, x, y)]\n  $: lastMoves = moveHistory.length > 0 ? moveHistory.slice(-1)[0] : [];\n\n  // Change the viewport of a mobile device so the whole board is visible\n  // on page load\n  $: containerWidth = width * 26 + 75;\n  $: {\n    const viewport = document.getElementById(\"viewport\");\n    if (0 < width && containerWidth > screen.width) {\n      console.log(\"change \" + containerWidth);\n      viewport.setAttribute(\"content\", `width=${containerWidth}`);\n    }\n  }\n\n  /**\n   * Handles when  a spot on the board has been selected by the player.\n   * Depending on the settings, we may want to wait for a double\n   * click before making this a move.\n   */\n  function handleSpotSelected(event) {\n    const eventX = event.detail.x;\n    const eventY = event.detail.y;\n\n    // Short circuit getting here when a move should not be allowed according\n    // to board/game state\n    if (!allowMove) {\n      return;\n    }\n\n    // if the player is using a mouse, let the first selection made\n    // go through. if the player is using a touch screen, make them confirm\n    // their selection with another click so they don't accidentally make a move\n    // while scrolling/zooming.\n    if (!isTouching() || (selectedX == eventX && selectedY == eventY)) {\n      pendingMove = true;\n      allowMove = false;\n      selectedX = eventX;\n      selectedY = eventY;\n      dispatch(\"move\", { x: eventX, y: eventY });\n    } else {\n      selectedX = eventX;\n      selectedY = eventY;\n    }\n  }\n\n  /**\n   * if a player moved in the spot last turn\n   * @param  {list} moves List of last turn's moves in format of [(x1,y1), (x2,y2)]\n   * @param  {int} x coord of spot to check\n   * @param  {int} y coord of spot to check\n   * @return {bool} true if player moved in x,y location last turned, false otherwise\n   */\n  function isLastMove(moves, x, y) {\n    for (let move of moves) {\n      if (x == move[0] && y == move[1]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n</script>\n\n<style>\n  div.container {\n    line-height: 1px;\n  }\n</style>\n\n<div class=\"container\" style=\"min-width: {containerWidth}px;\">\n  {#each { length: height } as _, y}\n    {#each { length: width } as _, x}\n      <Spot\n        {x}\n        {y}\n        {...spots[x][y]}\n        selected={selectedX == x && selectedY == y}\n        {allowMove}\n        lastMove={isLastMove(lastMoves, x, y)}\n        pendingMove={selectedX == x && selectedY == y && pendingMove}\n        on:selected={handleSpotSelected} />\n    {/each}\n    <br />\n  {/each}\n</div>\n",
    "<style>\n  div {\n    margin-top: 1em;\n  }\n</style>\n\n<div>\n  <input type=\"checkbox\" on:change />\n  See projected board\n</div>\n",
    "<script>\n  export let key = false;\n  export let player = 0;\n  export let controlled = 0;\n  export let pressuring = 0;\n  export let projected = 0;\n</script>\n\n<style>\n  div.container {\n    display: inline-block;\n    padding: 0.5em 1em 0.5em 1em;\n  }\n\n  div.key {\n    width: 8em;\n  }\n\n  div.player {\n    width: 4em;\n    margin-left: 0.5em;\n  }\n\n  .bg-color-0 {\n    background-color: rgba(0, 0, 0, 0.3);\n  }\n  .bg-color-1 {\n    background-color: rgba(0, 140, 186, 0.35);\n  }\n  .bg-color-2 {\n    background-color: rgba(244, 67, 54, 0.35);\n  }\n  .bg-color-3 {\n    background-color: rgba(22, 215, 79, 0.35);\n  }\n  .bg-color-4 {\n    background-color: rgba(255, 195, 0, 0.35);\n  }\n</style>\n\n<div class=\"container bg-color-{player}\" class:key class:player={!key}>\n  {#if key}\n    <div>Controlled</div>\n    <div>Projected</div>\n    <div>Pressuring</div>\n  {:else}\n    <div>{controlled}</div>\n    <div>{projected}</div>\n    <div>{pressuring}</div>\n  {/if}\n</div>\n",
    "<script>\n  /**\n   * A single spot on the game board\n   */\n\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  // possible background colors for a spot based on state\n  const BG_COLOR_DEFAULT = [231, 231, 231];\n  const BG_COLOR_SELECTED = [240, 255, 0];\n  const BG_COLORS_PLAYER = [\n    [0, 0, 0],\n    [0, 140, 186],\n    [244, 67, 54],\n    [22, 215, 79],\n    [255, 195, 0]\n  ];\n\n  // Coordinates of this spot on the board\n  export let x;\n  export let y;\n\n  // Current color controlling this spot, -1 for none\n  export let color = -1;\n\n  // Pressures on this spot from each color\n  export let pressures = [];\n\n  // Current power level of this spot\n  export let power = 0;\n\n  // @hack rseekely should not be hard coded\n  // Max possible power level\n  export let maxPower = 4;\n\n  // If the player selected this spot before moving here\n  export let selected = false;\n\n  // If a move is allowed to made on this spot\n  export let allowMove = true;\n\n  // If this spot is the current move being made by the player\n  export let pendingMove = false;\n\n  // If this spot was the last move made by any player\n  export let lastMove = false;\n\n  // The background color of the button based on current state\n  let buttonColor = BG_COLOR_DEFAULT;\n  let buttonOpacity = 1;\n  $: {\n    if (selected || pendingMove) {\n      buttonColor = BG_COLOR_SELECTED;\n      buttonOpacity = 1;\n    } else if (0 <= color) {\n      buttonColor = BG_COLORS_PLAYER[color];\n      buttonOpacity =\n        0 < power && power < maxPower ? (0.75 / maxPower) * power : 1;\n    } else {\n      buttonColor = BG_COLOR_DEFAULT;\n      buttonOpacity = 1;\n    }\n  }\n\n  // If the button should be enabled at all based on current state\n  $: buttonEnabled = allowMove && power < maxPower;\n\n  /**\n   * Dispatches an event to the parent when this spot was selected by the\n   * player. Depending on the settings, we may want to wait for a double\n   * click before making this a move.\n   */\n  function handleSelected() {\n    dispatch(\"selected\", { x: x, y: y });\n  }\n\n  /**\n   * Creates a CSS rgba() string\n   * @param  {list} color expressed as [r,g,b]\n   * @param  {float} opactiy expressed as float from 0 - 1\n   * @return {string} rgba(r,g,b,opacity)\n   */\n  function toRGBA(color, opacity) {\n    return `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${opacity})`;\n  }\n</script>\n\n<style>\n  button,\n  button:disabled,\n  button[disabled] {\n    margin: 1px;\n    padding: 0px;\n    height: 25px;\n    width: 25px;\n\n    color: white;\n    font: inherit;\n    font-weight: bold;\n    font-size: 12px;\n    text-align: center;\n\n    border: 1px solid black;\n    outline: none;\n  }\n\n  button:active {\n    box-shadow: inset 2px 2px 6px #c1c1c1;\n  }\n\n  /* Spot pulses when hovered or touched */\n  @keyframes pulse {\n    25% {\n      transform: scale(1.1);\n    }\n    75% {\n      transform: scale(0.9);\n    }\n  }\n\n  .selected,\n  .pulse:hover {\n    animation-name: pulse;\n    animation-duration: 1s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n  }\n\n  /* Outline a spot to indicate a move */\n  .outline,\n  .pulse:hover {\n    z-index: 2;\n    border: 1px solid rgba(0, 0, 0, 0) !important;\n    outline: 3px solid black !important;\n  }\n</style>\n\n<button\n  type=\"button\"\n  on:mouseup={handleSelected}\n  class:outline={lastMove || pendingMove || selected}\n  class:pulse={!pendingMove && !lastMove && buttonEnabled}\n  class:selected={selected && !pendingMove && !lastMove && buttonEnabled}\n  style=\"background-color: {toRGBA(buttonColor, buttonOpacity)};\"\n  disabled={!buttonEnabled} />\n",
    "<script>\n    /** \n     * Information prompt at the start of the game \n     */\n\n    // Unique id of the game\n    export let gameId = 0;\n\n    // If the game has at least one other human player\n    export let vsHumans = false;\n\n    // Url to share this game with others\n    $: shareUrl = `${window.location.protocol}//${window.location.host}/game/${gameId}`\n\n\n    /**\n     * Highlight and copy to clipboard the share url on click \n     */\n    function handleShare() {\n        \n        // highlight share url\n        const shareElm = document.getElementById(\"share-url\");\n        \n        const range = document.createRange();\n        range.selectNodeContents(shareElm);\n        \n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(range);       \n\n        // copy share url to clipboard\n        document.execCommand(\"copy\");\n\n\n    }\n\n\n</script>\n\n<style>\n\n    div {\n        width: 535px;\n        border-radius: 5px;\n        color: white;\n        background-color: rgba(255,0,0,.6);\n        font-weight: bold;\n\n    }\n\n    p {\n        padding: 8px;\n        margin-bottom: 0px;\n    }\n\n    p.share {\n        margin-top: 2px;\n        color: yellow;\n    }\n\n    p.share span {\n        padding: 4px;\n        border-radius: 5px;\n        border-color: black;\n        border-style: dashed;\n    }\n\n</style>\n\n<div>\n    {#if vsHumans}\n        <p>\n            The game will start after all players have made their first move. To invite a friend to the game, share the following link:\n        </p>\n        <p class=\"share\" on:mouseup={handleShare} >\n            <span id=\"share-url\">{shareUrl}</span>\n        </p>\n    {:else}\n        <p>\n            The game will start when you make your first move.\n        </p>\n    {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}