{"version":3,"file":"ui.js","sources":["../../../../node_modules/svelte/internal/index.mjs","../../ui/game.js","../../ui/game/Spot.svelte","../../ui/game/Board.svelte","../../ui/utils.js","../../ui/game/Score.svelte","../../ui/game/Scores.svelte","../../ui/game/StartPrompt.svelte","../../ui/game/App.svelte","../../ui/menu.js","../../ui/menu/App.svelte"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached\n    const children = target.childNodes;\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        const seqLen = upper_bound(1, longest + 1, idx => children[m[idx]].claim_order, current) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        if (node !== target.actual_end_child) {\n            target.insertBefore(node, target.actual_end_child);\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append(target, node);\n    }\n    else if (node.parentNode !== target || (anchor && node.nextSibling !== anchor)) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                processNode(node);\n                nodes.splice(i, 1);\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                processNode(node);\n                nodes.splice(i, 1);\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n    }, () => svg ? svg_element(name) : element(name));\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        node.data = '' + data;\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTag();\n    }\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    return new HtmlTag(html_tag_nodes.slice(1, html_tag_nodes.length - 1));\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(claimed_nodes) {\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            if (this.l) {\n                this.n = this.l;\n            }\n            else {\n                this.h(html);\n            }\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.3' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_await_block_branch, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","\"use strict\";\n\n/**\n * Non component specific game UI controllers\n */\n\n/**\n * Holds on to and answers basic questions about the game state data received\n * from the backend API. We try to treat this object as immutable so to not\n * introduce any state discrepancy between client and server.\n *\n * @property {String} gameId          Game tracked by this object\n * @property {Bool}   init            If the game state has received inital data\n *                                    from backend API\n * @property {Bool}   completed       If the game has ended\n * @property {Array}  moveHistory     Every move made by all players. Looks like:\n *                                    [[(color0, x, y), (color1, x, y)]]\n * @property {Array}  moveLast        Last moves made by all players. Looks like:\n *                                    [(color0, x, y), (color1, x, y)]\n * @property {Object} players         All the players in the game. Looks like:\n *                                    {\"id1\": {\"id\": \"id1\", \"ai\": false, \"color\": 0}}\n * @property {Array}  scores          Scores for each player. Looks like:\n *                                    [{\"controlled\": 0, \"pressuring\": 0, \"projected\": 0}]\n * @property {Object} settings        Dictionary of key value pairs for the game settings\n * @property {Array}  spotsCurrent    [x][y] arrays containing data for each spot on the board.\n *                                    Each spot looks like {\"color\": 0, \"power\": 3, \"pressures\":[]}\n * @property {Array}  spotsProjected  [x][y] arrays containing projected data for each spot on the board.\n * @property {Int}    turnCompleted   Number of turns completed in the game.\n * @property {Int}    timeCompleted   Epoch time when game ended.\n * @property {Int}    timeCreated     Epoch time when game was created.\n * @property {Int}    timeStarted     Epoch time when game started.\n * @property {Int}    timeUpdated     Epoch time when game last updated/changed state.\n */\nexport class GameState {\n  /**\n   * Constructor\n   * @param  {String} gameId Game tracked by this object\n   */\n  constructor(gameId) {\n    this.gameId = gameId;\n    this.playerId = null;\n    this.init = false;\n    this.completed = false;\n    this.moveHistory = [];\n    this.moveLast = [];\n    this.players = {};\n    this.scores = [];\n    this.settings = {};\n    this.spotsCurrent = [];\n    this.spotsProjected = [];\n    this.turnCompleted = 0;\n    this.turnMoves = {};\n    this.timeCompleted = null;\n    this.timeCreated = 0;\n    this.timeStarted = null;\n    this.timeUpdated = 0;\n  }\n\n  /**\n   * Update the game state with the new state received from the backend API.\n   * @param  {Object} state New game state\n   */\n  update(state) {\n    this.completed = \"completed\" in state ? state[\"completed\"] : this.completed;\n    this.playerId = \"player_id\" in state ? state[\"player_id\"] : this.playerId;\n    this.players = \"players\" in state ? state[\"players\"] : this.players;\n    this.scores = \"scores\" in state ? state[\"scores\"] : this.scores;\n    this.settings = \"settings\" in state ? state[\"settings\"] : this.settings;\n    this.spotsCurrent = \"board\" in state ? state[\"board\"] : this.spotsCurrent;\n    this.spotsProjected =\n      \"projected\" in state ? state[\"projected\"] : this.spotsProjected;\n    this.turnCompleted =\n      \"turn_completed\" in state ? state[\"turn_completed\"] : this.turnCompleted;\n    this.turnMoves =\n      \"turn_moves\" in state ? state[\"turn_moves\"] : this.turnMoves;\n    this.timeCompleted =\n      \"time_completed\" in state ? state[\"time_completed\"] : this.timeCompleted;\n    this.timeCreated =\n      \"time_created\" in state ? state[\"time_created\"] : this.timeCreated;\n    this.timeStarted =\n      \"time_started\" in state ? state[\"time_started\"] : this.timeStarted;\n    this.timeUpdated =\n      \"time_updated\" in state ? state[\"time_updated\"] : this.timeUpdated;\n\n    // From the list of all moves, extract out the latest moves made by each\n    // player\n    this.moveHistory = \"history\" in state ? state[\"history\"] : this.moveHistory;\n    if (0 < this.moveHistory.length) {\n      this.moveLast = this.moveHistory.slice(-1)[0];\n    }\n\n    // Mark this object as ready to be consumed by the UI\n    this.init = true;\n  }\n\n  /**\n   * Retrieves a game setting\n   * @param  {String} key Setting key\n   * @return (mixed) Setting value\n   * @throws {Exception} If setting does not exist\n   */\n  getSetting(key) {\n    if (!(key in this.settings)) {\n      throw `Setting '${key}'' does not exist`;\n    }\n\n    return this.settings[key];\n  }\n\n  /**\n   * If there is more than one human player in the game\n   * @return {Bool} True when at least one opponent is human\n   */\n  isVsHuman() {\n    const aiCount = this.getSetting(\"ai_count\");\n    const playerCount = this.getSetting(\"player_count\");\n    const humanCount = playerCount - aiCount;\n    return humanCount > 1;\n  }\n\n  /**\n   * If there is an AI in the game\n   * @return {Bool} True when at least one opponent is AI\n   */\n  isVsAI() {\n    const aiCount = this.getSetting(\"ai_count\");\n    return aiCount > 0;\n  }\n}\n\n/**\n * A short poll to grab the latest game state from the backend API and\n * repopulate a GameState object.\n */\nexport class GamePoll {\n  /**\n   * Constructor\n   * @param  {GameState} gameState instance to update\n   * @param  {Function} optional callback called after update to gameState\n   */\n  constructor(gameState, callback = null) {\n    this._gameState = gameState;\n    this._callback = callback;\n    this._inFlight = false;\n    this._timeBetweenPoll = 1000;\n    this._interval = null;\n  }\n\n  /**\n   * Starts the continuous short poll to the backend API\n   */\n  async start() {\n    const self = this;\n\n    if (self._interval == null) {\n      self._interval = setInterval(() => {\n        self._poll();\n      }, self._timeBetweenPoll);\n\n      return self._poll();\n    }\n  }\n\n  /**\n   * Stops the short poll\n   */\n  stop() {\n    if (null != this._interval) {\n      clearInterval(this._interval);\n      this._interval = null;\n    }\n  }\n\n  /**\n   * Makes the backend call to the API for the latest game state and updates\n   * the GameState object.\n   */\n  async _poll() {\n    // do not fire off a new request while we still have one in motion\n    if (this._inFlight) {\n      return;\n    }\n\n    this._inFlight = true;\n    const self = this;\n\n    // Tells the API to only return the full game state if the game state\n    // has changed since our last update.\n    const timeUpdated = self._gameState.timeUpdated;\n    const queryString = `?updatedAfter=${timeUpdated}`;\n\n    return fetch(`/api/v1/game/${self._gameState.gameId}${queryString}`)\n      .then((response) => {\n        self._inFlight = false;\n        if (200 == response.status) {\n          return response.json();\n        } else {\n          throw response.statusText;\n        }\n      })\n      .then((data) => {\n        // If the game state has new info, update and make the user\n        // callback\n        if (timeUpdated < data[\"game\"][\"time_updated\"]) {\n          self._gameState.update(data[\"game\"]);\n\n          if (null != this._callback) {\n            this._callback();\n          }\n        }\n      })\n      .catch(() => {\n        self._inFlight = false;\n      });\n  }\n}\n","<script>\n  /**\n   * A single spot on the game board\n   */\n\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  // Possible background colors for a spot based on state\n  const BG_COLOR_DEFAULT = [231, 231, 231];\n  const BG_COLOR_SELECTED = [240, 255, 0];\n  const BG_COLORS_PLAYER = [\n    [0, 0, 0],\n    [0, 140, 186],\n    [244, 67, 54],\n    [22, 215, 79],\n    [255, 195, 0],\n  ];\n\n  // Coordinates of this spot on the board\n  export let x;\n  export let y;\n\n  // Current color controlling this spot, -1 for none\n  export let color = -1;\n\n  // Pressures on this spot from each color\n  export let pressures = [];\n\n  // Current power level of this spot\n  export let power = 0;\n\n  // @hack rseekely should not be hard coded\n  // Max possible power level\n  export let maxPower = 4;\n\n  // If the player selected this spot before moving here\n  export let selected = false;\n\n  // If a move is allowed to made on this spot\n  export let allowMove = true;\n\n  // If this spot is the current move being made by the player\n  export let pendingMove = false;\n\n  // If this spot was the last move made by any player\n  export let lastMove = false;\n\n  // The background color of the button based on current state\n  let buttonColor = BG_COLOR_DEFAULT;\n  let buttonOpacity = 1;\n  $: {\n    if (selected || pendingMove) {\n      buttonColor = BG_COLOR_SELECTED;\n      buttonOpacity = 1;\n    } else if (0 <= color) {\n      buttonColor = BG_COLORS_PLAYER[color];\n      buttonOpacity =\n        0 < power && power < maxPower ? (0.75 / maxPower) * power : 1;\n    } else {\n      buttonColor = BG_COLOR_DEFAULT;\n      buttonOpacity = 1;\n    }\n  }\n\n  // If the button should be enabled at all based on current state\n  $: buttonEnabled = allowMove && power < maxPower;\n\n  /**\n   * Dispatches an event to the parent when this spot was selected by the\n   * player. Depending on the settings, we may want to wait for a double\n   * click before making this a move.\n   */\n  function handleSelected() {\n    dispatch(\"selected\", { x: x, y: y });\n  }\n\n  /**\n   * Creates a CSS rgba() string\n   * @param  {list} color expressed as [r,g,b]\n   * @param  {float} opactiy expressed as float from 0 - 1\n   * @return {string} rgba(r,g,b,opacity)\n   */\n  function toRGBA(color, opacity) {\n    return `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${opacity})`;\n  }\n</script>\n\n<button\n  type=\"button\"\n  on:mouseup={handleSelected}\n  class:outline={lastMove || pendingMove || selected}\n  class:pulse={!pendingMove && !lastMove && buttonEnabled}\n  class:selected={selected && !pendingMove && !lastMove && buttonEnabled}\n  style=\"background-color: {toRGBA(buttonColor, buttonOpacity)};\"\n  disabled={!buttonEnabled}\n/>\n\n<style>\n  button,\n  button:disabled,\n  button[disabled] {\n    margin: 1px;\n    padding: 0px;\n    height: 25px;\n    width: 25px;\n\n    color: white;\n    font: inherit;\n    font-weight: bold;\n    font-size: 12px;\n    text-align: center;\n\n    border: 1px solid black;\n    outline: none;\n  }\n\n  button:active {\n    box-shadow: inset 2px 2px 6px #c1c1c1;\n  }\n\n  /* Spot pulses when hovered or touched */\n  @keyframes pulse {\n    25% {\n      transform: scale(1.1);\n    }\n    75% {\n      transform: scale(0.9);\n    }\n  }\n\n  .selected,\n  .pulse:hover {\n    animation-name: pulse;\n    animation-duration: 1s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n  }\n\n  /* Outline a spot to indicate a move */\n  .outline,\n  .pulse:hover {\n    z-index: 2;\n    border: 1px solid rgba(0, 0, 0, 0) !important;\n    outline: 3px solid black !important;\n  }\n</style>\n","<script>\n  /**\n   * Game board UI.\n   */\n\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  import Spot from \"./Spot.svelte\";\n  import { isTouching } from \"../utils.js\";\n\n  // The turn number completed this board state reflects\n  export let turnCompleted = 0;\n\n  // Number of spots on the board\n  export let width = 0;\n  export let height = 0;\n\n  // Data for each spot on the board in the format of\n  // [[{\"x\": 0, \"y\": 0}, {\"x\": 0, \"y\": 1}], [{\"x\": 1, \"y\": 0}, {\"x\": 1, \"y\": 1}]]\n  export let spots = [];\n\n  // If the game/board state allows the player to make a move\n  export let allowMove = true;\n\n  // All the past moves made in the game in the format of\n  // [[(color0, x, y), (color1, x, y)]]\n  export let moveHistory = [];\n\n  // The spot the player submitted and must use\n  export let submittedSpotX = -1;\n  export let submittedSpotY = -1;\n\n  // This player's selected spot on the board, or -1 if none\n  $: selectedX = turnCompleted ? submittedSpotX : submittedSpotX;\n  $: selectedY = turnCompleted ? submittedSpotY : submittedSpotY;\n\n  // if we sent off a move from this player to the backend API\n  let pendingMove;\n  $: turnCompleted, (pendingMove = !submittedSpotX === -1);\n\n  // the last set of moves made by each player in the format of\n  // [(color0, x, y), (color1, x, y)]\n  $: lastMoves = moveHistory.length > 0 ? moveHistory.slice(-1)[0] : [];\n\n  // Change the viewport of a mobile device so the whole board is visible\n  // on page load\n  $: containerWidth = width * 26 + 75;\n  $: {\n    const viewport = document.getElementById(\"viewport\");\n    if (0 < width && containerWidth > screen.width) {\n      viewport.setAttribute(\"content\", `width=${containerWidth}`);\n    }\n  }\n\n  /**\n   * Handles when  a spot on the board has been selected by the player.\n   * Depending on the settings, we may want to wait for a double\n   * click before making this a move.\n   */\n  export function handleSpotSelected(event) {\n    const eventX = event.detail.x;\n    const eventY = event.detail.y;\n\n    // Short circuit getting here when a move should not be allowed according\n    // to board/game state\n    if (!allowMove) {\n      return;\n    }\n\n    // if the player is using a mouse, let the first selection made\n    // go through. if the player is using a touch screen, make them confirm\n    // their selection with another click so they don't accidentally make a move\n    // while scrolling/zooming.\n    if (!isTouching() || (selectedX == eventX && selectedY == eventY)) {\n      pendingMove = true;\n      allowMove = false;\n      selectedX = eventX;\n      selectedY = eventY;\n      dispatch(\"move\", { x: eventX, y: eventY });\n    } else {\n      selectedX = eventX;\n      selectedY = eventY;\n    }\n  }\n\n  /**\n   * If a player moved in the spot last turn\n   * @param  {list} moves List of last turn's moves in format of [(x1,y1), (x2,y2)]\n   * @param  {int} x coord of spot to check\n   * @param  {int} y coord of spot to check\n   * @return {bool} true if player moved in x,y location last turned, false otherwise\n   */\n  export function isLastMove(moves, x, y) {\n    for (let move of moves) {\n      if (x == move[0] && y == move[1]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n</script>\n\n<div class=\"container\" style=\"min-width: {containerWidth}px;\">\n  <!-- {# Iterate through each spot on the board and create a Spot component #} -->\n  {#each { length: height } as _, y}\n    {#each { length: width } as _, x}\n      <Spot\n        {x}\n        {y}\n        {allowMove}\n        {...spots[x][y]}\n        selected={selectedX == x && selectedY == y}\n        lastMove={isLastMove(lastMoves, x, y)}\n        pendingMove={selectedX == x && selectedY == y && pendingMove}\n        on:selected={handleSpotSelected}\n      />\n    {/each}\n    <br />\n  {/each}\n</div>\n\n<style>\n  div.container {\n    line-height: 1px;\n  }\n</style>\n","\"use strict\";\n\n/**\n * Utility functions used across the UI\n */\n\n/**\n * Sets up listeners to detect browser capabilities\n */\nexport function detectCapabilities() {\n  // Detect if the user is interacting with the screen via touching\n  window.addEventListener(\n    \"touchstart\",\n    function onFirstTouch() {\n      window.CAPABILITY_TOUCH = true;\n\n      // Only need to detect human touch one time\n      window.removeEventListener(\"touchstart\", onFirstTouch, false);\n    },\n    false\n  );\n}\n\n/**\n * If the user has interacted with the screen via touch\n * @returns {Bool} True if user has interacted via touch, false otherwise\n */\nexport function isTouching() {\n  return true == window.CAPABILITY_TOUCH;\n}\n","<script>\n  /**\n   * Displays the score for a single player\n   */\n\n  // This scoreboard entry is serving as the key and not a player score\n  export let key = false;\n\n  // The player color owning this score\n  export let color = 0;\n\n  // If the game has ended\n  export let gameOver = false;\n\n  // If this player is the outright winner of the game\n  export let winner = false;\n\n  // We give the winner of the game a crown\n  $: crown = gameOver && winner;\n\n  // The player's current scores\n  export let controlled = 0;\n  export let pressuring = 0;\n  export let projected = 0;\n</script>\n\n<div class=\"container\">\n  {#if crown}\n    <div class=\"crown\">\n      <img src=\"/img/crown.png\" width=\"35px\" alt=\"Crown!\" />\n    </div>\n  {/if}\n\n  <div class=\"inner bg-color-{color}\" class:crown class:key class:player={!key}>\n    {#if key}\n      <div>Controlled</div>\n      <div>Projected</div>\n      <div>Pressuring</div>\n    {:else}\n      <div>{controlled}</div>\n      <div>{projected}</div>\n      <div>{pressuring}</div>\n    {/if}\n  </div>\n</div>\n\n<style>\n  div.container {\n    display: inline-block;\n  }\n\n  div.crown {\n    padding: 0em 0em 0.2em 1.3em;\n  }\n\n  div.inner {\n    padding: 0.5em 1em 0.5em 1em;\n    border: 1px dashed black;\n    text-align: center;\n  }\n\n  div.key {\n    width: 8em;\n    border-radius: 4px;\n    color: black;\n    font-weight: bolder;\n  }\n\n  div.player {\n    width: 4em;\n    border-radius: 4px;\n    margin-left: 0.5em;\n    color: black;\n    font-weight: bold;\n  }\n\n  .bg-color-0 {\n    background-color: rgba(0, 0, 0, 0.3);\n  }\n  .bg-color-1 {\n    background-color: rgba(0, 140, 186, 0.35);\n  }\n  .bg-color-2 {\n    background-color: rgba(244, 67, 54, 0.35);\n  }\n  .bg-color-3 {\n    background-color: rgba(22, 215, 79, 0.35);\n  }\n  .bg-color-4 {\n    background-color: rgba(255, 195, 0, 0.35);\n  }\n\n  /* Div pulses when winner is declared */\n  @keyframes crown {\n    25% {\n      transform: scale(1.05);\n    }\n    75% {\n      transform: scale(1);\n    }\n  }\n\n  .crown {\n    animation-name: crown;\n    animation-duration: 2s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n  }\n</style>\n","<script>\n  /**\n   * Scoreboard for the current game\n   */\n\n  import Score from \"./Score.svelte\";\n\n  // If the game is over\n  export let gameOver = false;\n\n  // List of scores for each player in the format of:\n  // [{\"controlled\": 15, \"pressuring\": 24}]\n  export let scores = [];\n\n  // List of leaders of the game in the format of:\n  // [(color, score)]\n  export let leaders = [];\n\n  // When the game has ended with a tie score\n  $: tied = gameOver && leaders.length > 0;\n\n  /**\n   * If the player color is the outright winner of the match\n   * @param  {int} color Player color\n   * @param  {dict} score Player's score dictionary\n   * @return {Boolean} True if the player is outright winner\n   */\n  function isWinner(color, scores) {\n    let winner = true;\n    const score = scores[color][\"controlled\"];\n\n    for (let i = 0; i < scores.length; i++) {\n      if (i != color && scores[i][\"controlled\"] >= score) {\n        winner = false;\n        break;\n      }\n    }\n\n    return winner;\n  }\n</script>\n\n<div>\n  {#if gameOver}\n    <div class=\"gameover\">\n      {#if tied}\n        <p>This game has ended in a tie!</p>\n      {:else}\n        <p>This game has ended!</p>\n      {/if}\n    </div>\n  {/if}\n\n  <div class=\"container\">\n    <Score key={true} />\n    {#each scores as score, i}\n      <Score color={i} {gameOver} winner={isWinner(i, scores)} {...score} />\n    {/each}\n  </div>\n</div>\n\n<style>\n  p {\n    padding: 8px;\n  }\n\n  div.container {\n    white-space: nowrap;\n  }\n\n  div.gameover {\n    width: 535px;\n    border-radius: 5px;\n    color: white;\n    background-color: rgba(255, 0, 0, 0.6);\n    font-weight: bold;\n  }\n</style>\n","<script>\n  /**\n   * Information prompt at the start of the game\n   */\n\n  // Unique id of the game\n  export let gameId = 0;\n\n  // If the game has at least one other human player\n  export let vsHumans = false;\n\n  // Url to share this game with others\n  $: shareUrl = `${window.location.protocol}//${window.location.host}/game/${gameId}`;\n\n  /**\n   * Highlight and copy to clipboard the share url on click\n   */\n  function handleShare() {\n    // highlight share url\n    const shareElm = document.getElementById(\"share-url\");\n\n    const range = document.createRange();\n    range.selectNodeContents(shareElm);\n\n    const selection = window.getSelection();\n    selection.removeAllRanges();\n    selection.addRange(range);\n\n    // copy share url to clipboard\n    document.execCommand(\"copy\");\n  }\n</script>\n\n<div>\n  {#if vsHumans}\n    <p>\n      The game will start after all players have made their first move. To\n      invite a friend to the game, share the following link:\n    </p>\n    <p class=\"share\" on:mouseup={handleShare}>\n      <span id=\"share-url\">{shareUrl}</span>\n    </p>\n  {:else}\n    <p>The game will start when you make your first move.</p>\n  {/if}\n</div>\n\n<style>\n  div {\n    width: 535px;\n    border-radius: 5px;\n    color: white;\n    background-color: rgba(255, 0, 0, 0.6);\n    font-weight: bold;\n  }\n\n  p {\n    padding: 8px;\n    margin-bottom: 0px;\n  }\n\n  p.share {\n    margin-top: 2px;\n    color: yellow;\n  }\n\n  p.share span {\n    padding: 4px;\n    border-radius: 5px;\n    border-color: black;\n    border-style: dashed;\n  }\n</style>\n","<script>\n  /**\n   * Entry point for the game UI and lays out the top level UI components.\n   */\n\n  import { GameState, GamePoll } from \"../game.js\";\n  import Board from \"./Board.svelte\";\n  import Scores from \"./Scores.svelte\";\n  import Settings from \"./Settings.svelte\";\n  import StartPrompt from \"./StartPrompt.svelte\";\n\n  // Unique string id for this game\n  export let gameId = 0;\n\n  // Contains the current game data/state as retrieved from the backend API\n  let gameState = new GameState(gameId);\n\n  // The spot our player has chosen to play\n  let submittedSpotX;\n  let submittedSpotY;\n\n  // If the game state has completed the initial population from the\n  // backend API -- don't want to show some elements until data exists.\n  $: init = gameState.init;\n\n  // If the game has ended and no more play is allowed. This propagates\n  // to various components so an end game state can be shown.\n  $: gameOver = gameState.completed;\n\n  // Number of turns completed/processed in this game.\n  $: turnCompleted = gameState.turnCompleted;\n\n  // If the player should be allowed to make a move on the board\n  $: allowMove = !submittedSpotX && !gameOver && gameState.timeStarted > 0;\n\n  // The data representation for every spot on the board -- the player can\n  // toggle different views (e.g. looking at the projected board).\n  $: spots = gameState.spotsCurrent;\n\n  // The opponent has moved if a move other than ours is present\n  $: opponentSubmittedMove = gameState.turnMoves[gameState.playerId]\n    ? Object.keys(gameState.turnMoves).length >= 2\n    : Object.keys(gameState.turnMoves).length >= 1;\n\n  // Fires off a repeated call to the backend API to grab the latest game\n  // state. Yes, this should be sockets instead of short polling.\n  const gamePoll = new GamePoll(gameState, () => {\n    // Lets Svelte know the game state has changed so it can re-evaulate\n    // all related data bindings.\n    gameState = gameState;\n\n    if (gameState.turnMoves) updateSubmittedSpot();\n  });\n  gamePoll.start();\n\n  /**\n   * Update our submitted spot coordinates if the game state indicates\n   * our player has made their move\n   */\n  function updateSubmittedSpot() {\n    submittedSpotX = undefined;\n    submittedSpotY = undefined;\n\n    const playerMove = gameState.turnMoves[gameState.playerId];\n    if (!playerMove) return;\n\n    submittedSpotX = playerMove[0];\n    submittedSpotY = playerMove[1];\n  }\n\n  /**\n   * Fires off a player move request to the backend API initiated from\n   * a player interacting with the board.\n   * @param  {Event} event Custom event dispatched from the game board\n   */\n  function handleMove(event) {\n    const spotX = event.detail.x;\n    const spotY = event.detail.y;\n    allowMove = false;\n    fetch(`/api/v1/game/${gameId}/move/${spotX}/${spotY}`);\n  }\n\n  /**\n   * Toggled the player's view of the board between the current game board\n   * and the projected board state.\n   * @param  {Event} event DOM event\n   */\n  function handleProjected(event) {\n    if (event.target.checked) {\n      allowMove = false;\n      spots = gameState.spotsProjected;\n    } else {\n      allowMove = true;\n      spots = gameState.spotsCurrent;\n    }\n  }\n</script>\n\n{#if init}\n  <!-- {# Prompt the players with instructions at start of game #} -->\n  {#if turnCompleted == 0}\n    <StartPrompt gameId={gameState.gameId} vsHumans={gameState.isVsHuman()} />\n    <!-- {# Otherwise, show the score of the game once a turn has finished #} -->\n  {:else}\n    <Scores {gameOver} scores={gameState.scores} />\n  {/if}\n\n  <div class=\"board-header\">\n    <Settings on:change={handleProjected} />\n    {#if opponentSubmittedMove}\n      <div class=\"opponent-status\">Opponent is ready</div>\n    {/if}\n  </div>\n\n  <Board\n    height={gameState.getSetting(\"dimension_x\")}\n    width={gameState.getSetting(\"dimension_y\")}\n    moveHistory={gameState.moveHistory}\n    {allowMove}\n    {spots}\n    {turnCompleted}\n    {submittedSpotX}\n    {submittedSpotY}\n    on:move={handleMove}\n  />\n{:else}\n  <p>Loading...</p>\n{/if}\n\n<style>\n  .board-header {\n    margin-top: 1rem;\n    display: flex;\n    align-items: center;\n  }\n\n  .opponent-status {\n    margin-left: 2rem;\n    font-size: 0.9rem;\n    color: rgba(0, 0, 0, 0.5);\n  }\n</style>\n","\"use strict\";\n\n/**\n * Controller functions for the game's main menu on the home page\n */\n\n/**\n * Sends a create game request to the backend API. Redirects the browser to\n * the new game on success.\n * @param  {Int} playerCount Number of total players to be in the game\n * @param  {Int} aiCount Number of AI players to be in the game\n * @param  {Int} aiStrength Strength of the AI. Higher is more difficult.\n */\nexport async function createGame(playerCount, aiCount, aiStrength) {\n  // Build the request options\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      player_count: playerCount,\n      ai_count: aiCount,\n      ai_strength: aiStrength,\n    }),\n  };\n\n  // Fire the new game request\n  return fetch(`/api/v1/game/new`, options)\n    .then((response) => {\n      if (200 == response.status) {\n        return response.json();\n      } else {\n        throw response.statusText;\n      }\n    })\n    .then((data) => {\n      // On successful creation of new game, redirect the browser to the game.\n      const gameId = data[\"game\"][\"game_id\"];\n      window.location.assign(`/game/${gameId}`);\n    })\n    .catch(() => {\n      return;\n    });\n}\n","<script>\n  /**\n   * Entry point for the main menu UI on the home screen.\n   */\n\n  import { createGame } from \"../menu.js\";\n\n  // Possible game difficulties for an AI opponent\n  const difficulties = [\n    [\"Easy\", 0],\n    [\"Medium\", 1],\n    [\"Hard\", 2],\n  ];\n\n  // Number of total players in the game\n  let playerCount = 2;\n\n  // Number of AI players in the game\n  let aiCount = 0;\n\n  // Higher AI strength means higher difficulty\n  let aiStrength = 0;\n\n  /**\n   * Creates a game with a single AI opponent\n   */\n  function playAi() {\n    aiCount = 1;\n    createGame(playerCount, aiCount, aiStrength);\n  }\n\n  /**\n   * Creates a game with a single human opponent\n   */\n  function playFriend() {\n    createGame(playerCount, aiCount, aiStrength);\n  }\n\n  /**\n   * Changes the AI difficulty based on player button toggle\n   * @param  {Event} event DOM event from difficulty buttons\n   */\n  function changeDifficulty(event) {\n    aiStrength = event.target.getAttribute(\"difficulty\");\n  }\n</script>\n\n<div class=\"container\">\n  <div class=\"block\">\n    <img src=\"/img/intro.gif\" alt=\"Demo gif\" />\n  </div>\n\n  <div class=\"block\">\n    <div class=\"option-ai\">\n      <!-- {# Start a game vs the AI #} -->\n      <div>\n        <button class=\"button-play button-ai\" on:mouseup={playAi}>\n          Play AI\n        </button>\n      </div>\n\n      <!-- {# Buttons to change the AI difficulty #} -->\n      <div class=\"difficulty\">\n        {#each difficulties as difficulty}\n          <button\n            class=\"button-difficulty\"\n            class:button-difficulty-selected={aiStrength == difficulty[1]}\n            difficulty={difficulty[1]}\n            on:mouseup={changeDifficulty}\n          >\n            {difficulty[0]}\n          </button>\n        {/each}\n      </div>\n    </div>\n\n    <!-- {# Start a game vs a human #} -->\n    <div class=\"option-friend\">\n      <button class=\"button-play button-friend\" on:mouseup={playFriend}>\n        Play Friend\n      </button>\n    </div>\n  </div>\n</div>\n\n<style>\n  .container {\n    display: inline-flex;\n    flex-wrap: wrap;\n  }\n\n  .block {\n    margin-right: 1em;\n  }\n\n  .option-ai {\n    margin-top: 5%;\n  }\n\n  .option-friend {\n    margin-top: 8%;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  .button-play {\n    border-radius: 4px;\n    color: white;\n    font-size: 300%;\n    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n  }\n\n  .button-ai {\n    background: rgb(223, 117, 20);\n  }\n\n  .button-friend {\n    background: rgb(28, 184, 65);\n  }\n\n  div.difficulty {\n    margin-top: 0.5em;\n  }\n\n  .button-difficulty {\n    color: white;\n    margin-right: 0.5em;\n    font-size: 125%;\n    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n    background: rgb(223, 117, 20);\n  }\n\n  .button-difficulty-selected {\n    outline: 3px dashed black;\n    outline-offset: 3px;\n  }\n</style>\n"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","current_component","is_hydrating","upper_bound","low","high","key","value","mid","append","target","node","hydrate_init","children","childNodes","m","Int32Array","length","p","longest","i","seqLen","idx","claim_order","newLen","Math","max","lis","toMove","last","cur","push","reverse","sort","j","anchor","insertBefore","init_hydrate","undefined","actual_end_child","parentElement","firstChild","nextSibling","parentNode","appendChild","insert","detach","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","important","style","setProperty","toggle_class","toggle","classList","set_current_component","component","createEventDispatcher","Error","get_current_component","type","detail","callbacks","$$","e","createEvent","initCustomEvent","custom_event","slice","call","bubble","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","callback","has","add","clear","fragment","before_update","dirty","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","globals","window","globalThis","global","get_spread_update","levels","updates","to_null_out","accounted_for","$$scope","n","get_spread_object","spread_props","create_component","mount_component","customElement","on_mount","on_destroy","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","bound","on_disconnect","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","l","intro","SvelteComponent","[object Object]","$destroy","index","indexOf","splice","$$props","obj","$$set","keys","GameState","gameId","playerId","completed","moveHistory","moveLast","players","scores","settings","spotsCurrent","spotsProjected","turnCompleted","turnMoves","timeCompleted","timeCreated","timeStarted","timeUpdated","state","aiCount","getSetting","GamePoll","gameState","_gameState","_callback","_inFlight","_timeBetweenPoll","_interval","self","setInterval","_poll","clearInterval","queryString","fetch","response","status","json","statusText","catch","toRGBA","color","opacity","dispatch","BG_COLOR_DEFAULT","BG_COLOR_SELECTED","BG_COLORS_PLAYER","x","y","pressures","power","maxPower","selected","allowMove","pendingMove","lastMove","buttonColor","buttonOpacity","buttonEnabled","isLastMove","moves","move","width","height","spots","submittedSpotX","submittedSpotY","selectedX","selectedY","lastMoves","containerWidth","viewport","getElementById","screen","eventX","eventY","CAPABILITY_TOUCH","gameOver","winner","controlled","pressuring","projected","crown","isWinner","score","leaders","tied","handleShare","shareElm","range","createRange","selectNodeContents","selection","getSelection","removeAllRanges","addRange","execCommand","vsHumans","shareUrl","location","protocol","host","isVsHuman","playerMove","updateSubmittedSpot","start","opponentSubmittedMove","spotX","spotY","checked","async","createGame","playerCount","aiStrength","method","headers","Content-Type","body","JSON","stringify","player_count","ai_count","ai_strength","onFirstTouch"],"mappings":"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"}